/**
 * @fileoverview gRPC-Web generated client stub for gRPC_test
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.18.1
// source: grpc.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as grpc_pb from './grpc_pb';


export class DBWriterClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateNewUser = new grpcWeb.MethodDescriptor(
    '/gRPC_test.DBWriter/CreateNewUser',
    grpcWeb.MethodType.UNARY,
    grpc_pb.User,
    grpc_pb.User,
    (request: grpc_pb.User) => {
      return request.serializeBinary();
    },
    grpc_pb.User.deserializeBinary
  );

  createNewUser(
    request: grpc_pb.User,
    metadata: grpcWeb.Metadata | null): Promise<grpc_pb.User>;

  createNewUser(
    request: grpc_pb.User,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: grpc_pb.User) => void): grpcWeb.ClientReadableStream<grpc_pb.User>;

  createNewUser(
    request: grpc_pb.User,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: grpc_pb.User) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/gRPC_test.DBWriter/CreateNewUser',
        request,
        metadata || {},
        this.methodDescriptorCreateNewUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/gRPC_test.DBWriter/CreateNewUser',
    request,
    metadata || {},
    this.methodDescriptorCreateNewUser);
  }

  methodDescriptorWriteDB = new grpcWeb.MethodDescriptor(
    '/gRPC_test.DBWriter/WriteDB',
    grpcWeb.MethodType.UNARY,
    grpc_pb.Data,
    grpc_pb.Data,
    (request: grpc_pb.Data) => {
      return request.serializeBinary();
    },
    grpc_pb.Data.deserializeBinary
  );

  writeDB(
    request: grpc_pb.Data,
    metadata: grpcWeb.Metadata | null): Promise<grpc_pb.Data>;

  writeDB(
    request: grpc_pb.Data,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: grpc_pb.Data) => void): grpcWeb.ClientReadableStream<grpc_pb.Data>;

  writeDB(
    request: grpc_pb.Data,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: grpc_pb.Data) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/gRPC_test.DBWriter/WriteDB',
        request,
        metadata || {},
        this.methodDescriptorWriteDB,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/gRPC_test.DBWriter/WriteDB',
    request,
    metadata || {},
    this.methodDescriptorWriteDB);
  }

  methodDescriptorReadDB = new grpcWeb.MethodDescriptor(
    '/gRPC_test.DBWriter/ReadDB',
    grpcWeb.MethodType.UNARY,
    grpc_pb.User,
    grpc_pb.DataList,
    (request: grpc_pb.User) => {
      return request.serializeBinary();
    },
    grpc_pb.DataList.deserializeBinary
  );

  readDB(
    request: grpc_pb.User,
    metadata: grpcWeb.Metadata | null): Promise<grpc_pb.DataList>;

  readDB(
    request: grpc_pb.User,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: grpc_pb.DataList) => void): grpcWeb.ClientReadableStream<grpc_pb.DataList>;

  readDB(
    request: grpc_pb.User,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: grpc_pb.DataList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/gRPC_test.DBWriter/ReadDB',
        request,
        metadata || {},
        this.methodDescriptorReadDB,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/gRPC_test.DBWriter/ReadDB',
    request,
    metadata || {},
    this.methodDescriptorReadDB);
  }

}

